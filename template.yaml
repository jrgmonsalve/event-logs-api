AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:

  DatabaseType:
    Type: String
    Default: "RDS_INSTANCE"
    Description: "Database type (RDS_INSTANCE or DYNAMODB)"

  DBname:
    Type: String
    Default: "Registration"
    Description: Database name

  ApiRateLimit:
    Type: String
    Default: "100"
    Description: "Rate limit for the API Gateway (in requests per second)"
  
  ApiBurstLimit:
    Type: String
    Default: "500"
    Description: "Burst limit for the API Gateway"

  ApiQuotaLimit:
    Type: String
    Default: "100000"
    Description: "Monthly quota for the API Gateway"

Resources:
  # API Gateway
  EventLogsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          Description: "Usage plan for EventLogs API"
          Throttle:
            RateLimit: !Ref ApiRateLimit
            BurstLimit: !Ref ApiBurstLimit  
          Quota:
            Limit: !Ref ApiQuotaLimit       
            Period: MONTH
      EndpointConfiguration: REGIONAL
      Cors: "'*'"
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Event Logs API
          version: 1.0
        paths:
          /event-logs:
            get:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListEventsFunction.Arn}/invocations
                httpMethod: GET
                type: aws_proxy
            post:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateEventFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy

  ListEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/application/lambda_handlers/getEventLog.listEventLogsHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          DATABASE_TYPE: !Ref DatabaseType
          DB_SECRET_ARN: !ImportValue DBSecretArn
          DB_NAME: !Ref DBname
          RDS_INSTANCE_ARN: !ImportValue RDSInstanceArn
          DYNAMODB_TABLE_NAME: !ImportValue DynamoDBTableName
          DYNAMODB_ARN: !ImportValue DynamoDBTableArn
      Events:
        ListEvents:
          Type: Api
          Properties:
            Path: /event-logs
            Method: GET
            RestApiId: !Ref EventLogsApi
            Auth:
              ApiKeyRequired: true
      Layers:
      - !Ref Mysql2Layer

  CreateEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/application/lambda_handlers/createEventLog.createEventLogHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          SQS_QUEUE_URL: !GetAtt EventQueue.QueueUrl
      Layers:
        - !Ref JoiLayer
      Events:
        CreateEvent:
          Type: Api
          Properties:
            Path: /event-logs
            Method: POST
            RestApiId: !Ref EventLogsApi
            Auth:
              ApiKeyRequired: true
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt EventQueue.Arn
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"

  ProcessEventFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/application/lambda_handlers/processEventLog.processEventLogHandler
      Runtime: nodejs20.x
      CodeUri: dist/
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          DATABASE_TYPE: !Ref DatabaseType
          DB_SECRET_ARN: !ImportValue DBSecretArn
          DB_NAME: !Ref DBname
          RDS_INSTANCE_ARN: !ImportValue RDSInstanceArn
          DYNAMODB_TABLE_NAME: !ImportValue DynamoDBTableName
          DYNAMODB_ARN: !ImportValue DynamoDBTableArn  
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt EventQueue.QueueName
      Layers:
      - !Ref Mysql2Layer
  
  JoiLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: joi-layer
      Description: "Layer for Joi validation library"
      ContentUri: lambda-layers/joi-layer
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Delete

  Mysql2Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: mysql2-layer
      Description: "Layer for MySQL2 library"
      ContentUri: lambda-layers/mysql2-layer
      CompatibleRuntimes:
        - nodejs20.x
      RetentionPolicy: Delete

  EventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: EventQueue
      
  # Separate event source mapping for the SQS queue to trigger the Lambda function
  ProcessEventFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt EventQueue.Arn
      FunctionName: !GetAtt ProcessEventFunction.Arn

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${EventLogsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/event-logs"

  QueueUrl:
    Description: "SQS Queue URL"
    Value: !GetAtt EventQueue.QueueUrl
